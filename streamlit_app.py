# -*- coding: utf-8 -*-
"""
AI Script Generator (Bangla) ‚Äî Streamlit version
Author: UCB Asset Management (UCB AML)
"""

import os, re, io
import pandas as pd
import streamlit as st
from urllib.parse import urlparse, parse_qs
from transformers import AutoTokenizer, AutoModelForSeq2SeqLM, pipeline
from docx import Document
import gdown
import transformers
st.write("Transformers version:", transformers.__version__)
st.write("Available modules:", dir(transformers)[:15])

# ============ Utility functions ============
def _paragraphize(txt):
    if not isinstance(txt, str): return ""
    txt = re.sub(r'(?m)^\s*[‚Ä¢\-\u2022]+\s*', '', txt)
    txt = re.sub(r'(?m)^\s*\d+\.\s*', '', txt)
    txt = txt.replace('‚Äî ‚Äî ‚Äî', ' ')
    txt = re.sub(r'\n{3,}', '\n\n', txt)
    return txt.strip()

# ============ Default samples ============
SAMPLES = {
    "‡¶®‡¶ø‡¶∞‡¶æ‡¶™‡¶¶ ‡¶ì ‡¶®‡¶ø‡¶∂‡ßç‡¶ö‡¶ø‡¶§ ‡¶∞‡¶ø‡¶ü‡¶æ‡¶∞‡ßç‡¶® (‡¶∏‡¶û‡ßç‡¶ö‡¶Ø‡¶º‡¶™‡¶§‡ßç‡¶∞‡ßá‡¶∞ ‡¶¨‡¶ø‡¶ï‡¶≤‡ßç‡¶™)": [{
        "product": "UCB Income Plus Fund",
        "script": "‡¶Ø‡¶æ‡¶∞‡¶æ ‡¶®‡¶ø‡¶∞‡¶æ‡¶™‡¶¶ ‡¶¨‡¶ø‡¶®‡¶ø‡¶Ø‡¶º‡ßã‡¶ó ‡¶™‡¶õ‡¶®‡ßç‡¶¶ ‡¶ï‡¶∞‡ßá‡¶®..."
    }],
    "‡¶¶‡ßÄ‡¶∞‡ßç‡¶ò‡¶Æ‡ßá‡¶Ø‡¶º‡¶æ‡¶¶‡ßá ‡¶∏‡¶Æ‡ßç‡¶™‡¶¶ ‡¶ó‡¶†‡¶® (‡¶á‡¶ï‡ßÅ‡¶á‡¶ü‡¶ø-‡¶Ö‡¶∞‡¶ø‡¶Ø‡¶º‡ßá‡¶®‡ßç‡¶ü‡ßá‡¶°)": [{
        "product": "UCB AML First Mutual Fund",
        "script": "‡¶¶‡ßÄ‡¶∞‡ßç‡¶ò‡¶Æ‡ßá‡¶Ø‡¶º‡¶æ‡¶¶‡¶ø ‡¶∏‡¶Æ‡ßç‡¶™‡¶¶ ‡¶ó‡¶†‡¶®‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø..."
    }]
}
CLIENT_TYPES = list(SAMPLES.keys())

# ============ Product Facts ============
PRODUCT_FACTS = {
    "UCB Income Plus Fund": {
        "indicative_return": "‡¶¨‡¶∞‡ßç‡¶§‡¶Æ‡¶æ‡¶® ‡¶¨‡¶æ‡¶ú‡¶æ‡¶∞‡ßá ‡¶á‡¶ô‡ßç‡¶ó‡¶ø‡¶§‡¶Æ‡¶æ‡¶§‡ßç‡¶∞ ‡¶®‡ßá‡¶ü ~‡ßØ‚Äì‡ßß‡ßß% (‡¶ó‡ßç‡¶Ø‡¶æ‡¶∞‡¶æ‡¶®‡ßç‡¶ü‡¶ø ‡¶®‡¶Ø‡¶º)",
        "exit_load": "‡¶™‡ßç‡¶∞‡¶•‡¶Æ ‡ßß‡ß¶‡ß¶ ‡¶¶‡¶ø‡¶® ‡¶∞‡¶ø‡¶°‡ßá‡¶Æ‡ßç‡¶™‡¶∂‡¶®‡ßá ‡¶ö‡¶æ‡¶∞‡ßç‡¶ú; ‡¶è‡¶∞‡¶™‡¶∞ ‡¶∏‡¶æ‡¶ß‡¶æ‡¶∞‡¶£‡¶§ ‡¶ö‡¶æ‡¶∞‡ßç‡¶ú‡¶Æ‡ßÅ‡¶ï‡ßç‡¶§",
        "sip": "SIP: ‡¶®‡ßç‡¶Ø‡ßÇ‡¶®‡¶§‡¶Æ ‡ß≥‡ß´,‡ß¶‡ß¶‡ß¶/‡¶Æ‡¶æ‡¶∏",
        "non_sip": "Non-SIP: ‡¶®‡ßç‡¶Ø‡ßÇ‡¶®‡¶§‡¶Æ ‡ß≥‡ßß‡ß¶,‡ß¶‡ß¶‡ß¶",
        "tax": "‡¶ï‡¶∞ ‡¶∞‡¶ø‡¶¨‡ßá‡¶ü‡ßá‡¶∞ ‡¶∏‡¶Æ‡ßç‡¶≠‡¶æ‡¶¨‡¶®‡¶æ (‡¶Ü‡¶Ø‡¶º‡¶ï‡¶∞ ‡¶¨‡¶ø‡¶ß‡¶ø ‡¶Ö‡¶®‡ßÅ‡¶Ø‡¶æ‡¶Ø‡¶º‡ßÄ)"
    },
    "UCB AML First Mutual Fund": {
        "indicative_return": "‡¶á‡¶ï‡ßÅ‡¶á‡¶ü‡¶ø-‡¶Ö‡¶∞‡¶ø‡¶Ø‡¶º‡ßá‡¶®‡ßç‡¶ü‡ßá‡¶°‚Äî‡¶¶‡ßÄ‡¶∞‡ßç‡¶ò‡¶Æ‡ßá‡¶Ø‡¶º‡¶æ‡¶¶‡ßá ‡¶¨‡¶æ‡¶ú‡¶æ‡¶∞‡¶®‡¶ø‡¶∞‡ßç‡¶≠‡¶∞",
        "exit_load": "‡¶è‡¶ï‡ßç‡¶∏‡¶ø‡¶ü ‡¶≤‡ßã‡¶° ‡¶∏‡ßç‡¶ï‡¶ø‡¶Æ ‡¶§‡¶•‡ßç‡¶Ø‡¶™‡¶§‡ßç‡¶∞ ‡¶Ö‡¶®‡ßÅ‡¶Ø‡¶æ‡¶Ø‡¶º‡ßÄ",
        "sip": "SIP: ‡¶®‡ßç‡¶Ø‡ßÇ‡¶®‡¶§‡¶Æ ‡ß≥‡ß©,‡ß¶‡ß¶‡ß¶/‡¶Æ‡¶æ‡¶∏",
        "non_sip": "Non-SIP: ‡¶®‡ßç‡¶Ø‡ßÇ‡¶®‡¶§‡¶Æ ‡ß≥‡ßß‡ß¶,‡ß¶‡ß¶‡ß¶",
        "tax": "‡¶™‡ßç‡¶∞‡¶Ø‡ßã‡¶ú‡ßç‡¶Ø ‡¶π‡¶≤‡ßá ‡¶Ü‡¶Ø‡¶º‡¶ï‡¶∞ ‡¶∞‡¶ø‡¶¨‡ßá‡¶ü"
    }
}
def facts_for(product: str) -> str:
    f = PRODUCT_FACTS.get(product or "", {})
    if not f: return ""
    return " | ".join([f"‡¶∞‡¶ø‡¶ü‡¶æ‡¶∞‡ßç‡¶®: {f['indicative_return']}",
                       f"‡¶è‡¶ï‡ßç‡¶∏‡¶ø‡¶ü ‡¶≤‡ßã‡¶°: {f['exit_load']}",
                       f"{f['sip']}", f"{f['non_sip']}", f"{f['tax']}"])

# ============ Model ============
MODEL_NAME = "google/flan-t5-small"
st.cache_resource(show_spinner=False)
def load_model():
    tok = AutoTokenizer.from_pretrained(MODEL_NAME)
    mdl = AutoModelForSeq2SeqLM.from_pretrained(MODEL_NAME)
    pipe = pipeline("text2text-generation", model=mdl, tokenizer=tok, device_map="auto")
    return pipe
gen = load_model()

# ============ Prompt & Generation ============
def _facts_block(product, include):
    if not include: return ""
    ftxt = facts_for(product)
    return f"\n\n‡¶™‡¶£‡ßç‡¶Ø-‡¶§‡¶•‡ßç‡¶Ø (‡¶π‡ßÅ‡¶¨‡¶π‡ßÅ ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßÅ‡¶®): {ftxt}\n" if ftxt else ""

def build_prompt(client_type, product, horizon, risk, extra, include_facts=True):
    shots = SAMPLES.get(client_type, [])
    ex = _paragraphize(shots[0]["script"]) if shots else ""
    rules = [
        "‡¶≠‡¶æ‡¶∑‡¶æ: ‡¶ñ‡¶æ‡¶Å‡¶ü‡¶ø ‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ‡•§",
        "‡¶¶‡ßà‡¶∞‡ßç‡¶ò‡ßç‡¶Ø: ‡ß©‡ß´‡ß¶‚Äì‡ß¨‡ß¶‡ß¶ ‡¶∂‡¶¨‡ßç‡¶¶; ‡¶â‡¶¶‡¶æ‡¶π‡¶∞‡¶£ ‡¶ì ‡¶¨‡¶æ‡¶∏‡ßç‡¶§‡¶¨ ‡¶™‡ßç‡¶∞‡ßá‡¶ï‡ßç‡¶∑‡¶æ‡¶™‡¶ü‡¶∏‡¶π‡•§",
        "‡¶™‡¶£‡ßç‡¶Ø-‡¶§‡¶•‡ßç‡¶Ø ‡¶¨‡ßç‡¶≤‡¶ï ‡¶π‡ßÅ‡¶¨‡¶π‡ßÅ ‡¶∞‡¶æ‡¶ñ‡ßÅ‡¶®; ‡¶ï‡ßã‡¶®‡ßã ‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡¶® ‡¶®‡¶Ø‡¶º‡•§"
    ]
    prompt = f"""‡¶Ü‡¶™‡¶®‡¶ø ‡¶è‡¶ï‡¶ú‡¶® ‡¶Ö‡¶≠‡¶ø‡¶ú‡ßç‡¶û ‡¶Æ‡¶ø‡¶â‡¶ö‡ßÅ‡¶Ø‡¶º‡¶æ‡¶≤ ‡¶´‡¶æ‡¶®‡ßç‡¶° RM‡•§
‡¶â‡¶¶‡¶æ‡¶π‡¶∞‡¶£:
{ex}
{_facts_block(product, include_facts)}
‡¶®‡¶ø‡¶∞‡ßç‡¶¶‡ßá‡¶∂‡¶®‡¶æ:
{chr(10).join(rules)}
‡¶á‡¶®‡¶™‡ßÅ‡¶ü:
- ‡¶ï‡ßç‡¶≤‡¶æ‡¶Ø‡¶º‡ßá‡¶®‡ßç‡¶ü ‡¶ü‡¶æ‡¶á‡¶™: {client_type}
- ‡¶™‡¶£‡ßç‡¶Ø: {product}
- ‡¶∏‡¶Æ‡¶Ø‡¶º‡¶∏‡ßÄ‡¶Æ‡¶æ: {horizon}
- ‡¶ù‡ßÅ‡¶Å‡¶ï‡¶ø: {risk}
- ‡¶®‡ßã‡¶ü: {extra}
‡¶Ü‡¶â‡¶ü‡¶™‡ßÅ‡¶ü (Bangla ‡¶∏‡ßç‡¶ï‡ßç‡¶∞‡¶ø‡¶™‡ßç‡¶ü):"""
    return prompt

def generate_script(ct, prod, horizon, risk, extra, temp, max_tok, include_facts):
    prompt = build_prompt(ct, prod, horizon, risk, extra, include_facts)
    params = dict(max_new_tokens=int(max_tok), temperature=float(temp),
                  top_p=0.95, top_k=50, repetition_penalty=1.05)
    res = gen(prompt, **params)[0]["generated_text"]
    if "‡¶™‡¶£‡ßç‡¶Ø-‡¶§‡¶•‡ßç‡¶Ø" not in res and include_facts:
        res += "\n\n‡¶™‡¶£‡ßç‡¶Ø-‡¶§‡¶•‡ßç‡¶Ø (‡¶π‡ßÅ‡¶¨‡¶π‡ßÅ): " + facts_for(prod)
    res += "\n\n‡¶®‡ßã‡¶ü: ‡¶Æ‡¶ø‡¶â‡¶ö‡ßÅ‡¶Ø‡¶º‡¶æ‡¶≤ ‡¶´‡¶æ‡¶®‡ßç‡¶° ‡¶¨‡¶æ‡¶ú‡¶æ‡¶∞‡¶®‡¶ø‡¶∞‡ßç‡¶≠‡¶∞; ‡¶™‡ßÇ‡¶∞‡ßç‡¶¨‡ßá‡¶∞ ‡¶Ü‡¶Ø‡¶º ‡¶≠‡¶¨‡¶ø‡¶∑‡ßç‡¶Ø‡¶§‡ßá‡¶∞ ‡¶®‡¶ø‡¶∂‡ßç‡¶ö‡¶Ø‡¶º‡¶§‡¶æ ‡¶®‡¶Ø‡¶º‡•§"
    return res

# ============ Loaders ============
def _sheet_id_and_gid(url):
    s = url.strip()
    if "/" not in s and len(s) > 20: return s, "0"
    u = urlparse(s)
    parts = [p for p in u.path.split("/") if p]
    sid = parts[3] if len(parts)>3 and parts[2]=="d" else parts[-1]
    gid = parse_qs(u.query).get("gid",["0"])[0]
    return sid,gid

def load_gsheet(url):
    sid,gid=_sheet_id_and_gid(url)
    df=pd.read_csv(f"https://docs.google.com/spreadsheets/d/{sid}/export?format=csv&gid={gid}")
    return df

def load_docx(file_path):
    doc = Document(file_path)
    lines=[p.text for p in doc.paragraphs]
    return "\n".join(lines)

# ============ Streamlit App Layout ============
st.set_page_config(page_title="AI Script Generator (Bangla)", layout="wide")

st.title("ü§ñ AI Script Generator (Bangla)")
st.caption("Generate investor-facing call scripts with product facts intact ‚Äî by UCB AML")

with st.sidebar:
    st.header("‚öôÔ∏è Controls")
    ct = st.selectbox("‡¶ï‡ßç‡¶≤‡¶æ‡¶Ø‡¶º‡ßá‡¶®‡ßç‡¶ü ‡¶ü‡¶æ‡¶á‡¶™", CLIENT_TYPES)
    prod = st.selectbox("‡¶™‡¶£‡ßç‡¶Ø/‡¶´‡ßã‡¶ï‡¶æ‡¶∏", [x["product"] for x in SAMPLES[ct]])
    horizon = st.selectbox("‡¶∏‡¶Æ‡¶Ø‡¶º‡¶∏‡ßÄ‡¶Æ‡¶æ", ["‡ß¨‚Äì‡ßß‡ß® ‡¶Æ‡¶æ‡¶∏","‡ßß‚Äì‡ß© ‡¶¨‡¶õ‡¶∞","‡ß©+ ‡¶¨‡¶õ‡¶∞"])
    risk = st.radio("‡¶ù‡ßÅ‡¶Å‡¶ï‡¶ø", ["‡¶ï‡¶Æ","‡¶Æ‡¶ß‡ßç‡¶Ø‡¶Æ","‡¶â‡¶ö‡ßç‡¶ö"], horizontal=True)
    extra = st.text_area("‡¶Ö‡¶§‡¶ø‡¶∞‡¶ø‡¶ï‡ßç‡¶§ ‡¶®‡ßã‡¶ü", "SIP ‡¶Ö‡¶ó‡ßç‡¶∞‡¶æ‡¶ß‡¶ø‡¶ï‡¶æ‡¶∞, ‡¶∂‡¶∞‡ßÄ‡¶Ø‡¶º‡¶æ‡¶π ‡¶™‡¶õ‡¶®‡ßç‡¶¶ ‡¶á‡¶§‡ßç‡¶Ø‡¶æ‡¶¶‡¶ø")
    temp = st.slider("Temperature", 0.3, 1.5, 0.8, 0.05)
    max_tok = st.slider("Max tokens", 200, 900, 500, 50)
    include_facts = st.checkbox("‡¶™‡¶£‡ßç‡¶Ø-‡¶§‡¶•‡ßç‡¶Ø ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡ßÅ‡¶® (‡¶π‡ßÅ‡¶¨‡¶π‡ßÅ)", value=True)

st.markdown("### ‚ú® Script Output")
if st.button("Generate Script"):
    with st.spinner("AI generating..."):
        output = generate_script(ct, prod, horizon, risk, extra, temp, max_tok, include_facts)
        st.text_area("Generated Script", output, height=600)
        st.download_button("‚¨áÔ∏è Download .txt", output.encode("utf-8"), "script.txt")

st.markdown("---")
st.markdown("#### üì• Load Samples from Google Sheet or Doc (Optional)")
col1, col2 = st.columns(2)
with col1:
    gsheet_url = st.text_input("Google Sheet URL / ID")
    if st.button("Load from Google Sheet"):
        try:
            df = load_gsheet(gsheet_url)
            st.write(df.head())
            st.success(f"Loaded {len(df)} rows from Sheet.")
        except Exception as e:
            st.error(f"Failed: {e}")
with col2:
    gdoc_id = st.text_input("Google Doc ID")
    if st.button("Load from Google Doc"):
        try:
            path = gdown.download(f"https://docs.google.com/document/d/{gdoc_id}/export?format=docx",
                                  "temp.docx", quiet=True)
            text = load_docx(path)
            st.text_area("Doc Preview", text[:2000])
            st.success("Google Doc loaded successfully.")
        except Exception as e:
            st.error(f"Failed: {e}")

st.markdown("---")
st.caption("¬© UCB Asset Management Ltd | For internal demo and training use")

